import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "tree.tree" for Tree
import "tree.node" for Node
import "tree.pin" for Pin
import "tree.node_shape" for SHAPE_PANEL
import "geograph.variant" for VAR_TYPE_GEO
import "sketchnetwork.variant" for VAR_TYPE_GEOMETRY as VAR_TYPE_SHP
import "solidgraph.nodes.extrude" for Extrude as sg_Extrude
import "solidnetwork.node_render" for NodeRender

class Extrude is Node
{
	init()
	{
		super.init()

		this.shape = SHAPE_PANEL

		this.parent = Pin(this, "out", VAR_TYPE_GEO)
		this.children = [
			Pin(this, "in", VAR_TYPE_SHP),
		]

		this.params.add(NodeParam("dist", 0.0))

		this.layout()

		this.v_geos = nil

		this.render = NodeRender()
	}

	calc_value(idx)
	{
		return this.get_out_geos()
	}

	draw(mt, cam_mt)
	{
		super.draw(mt, cam_mt)

		var v_geos = this.get_out_geos()
		this.render.draw_geo(v_geos, this.pos)
	}

	get_out_geos()
	{
		if (this.v_geos) {
			return this.v_geos
		}

		var v_shp = Tree.calc_input_value(this.children[0])
		if (!v_shp) {
			return nil
		}

		var impl = sg_Extrude()
		Blueprint.connect(VariantProxy(v_shp), "out", impl, "shape")

		var dist = this.query_param("dist").value
		Blueprint.connect(VariantProxy(Variant(dist)), "out", impl, "dist")

		this.v_geos = Blueprint.calc_output_value(impl, "geo")
		return this.v_geos
	}
}