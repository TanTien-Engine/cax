import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.variant" for Variant
import "network.vertex" for Vertex
import "network.network" for Network
import "network.vertex_shape" for SHAPE_CIRCLE
import "network.vertex_shape" for PIN_CIRCLE_AROUND_IDX
import "network.pin" for Pin as nw_Pin
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY as sg_VAR_TYPE_GEOMETRY
import "sketchnetwork.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT
import "sketchnetwork.nodes.sketchgraph" for Sketchgraph
import "maths.vector" for Vector2
import "editor.node_cache" for NODE_CACHE

class PointPos is Vertex
{
	init()
	{
		super.init()

		this.shape = SHAPE_CIRCLE

		this.pin_types_f = [ VAR_TYPE_CONSTRAINT ]
		this.pin_types_t = [ 
			[ VAR_TYPE_GEOMETRY ]
		]

		this.title = "定点"

		this.impl = NODE_CACHE.fetch("../cax/assets/blueprints/cons/set_point_pos.ves", nil)

		this.params.add(NodeParam("pos", Vector2(0, 0)))
	}

	get_title()
	{
		return this.title
	}

	resolve_cons()
	{
		var pins = Network.neighbors_pins(this, PIN_CIRCLE_AROUND_IDX)
		if (pins.isEmpty) {
			return nil
		}

		var pin = pins.front()
		if (pin is nw_Pin)
		{
			if (pin.vert is Sketchgraph)
			{
				var geo = pin.vert.get_input_geo(pin)
				Blueprint.connect(VariantProxy(Variant(sg_VAR_TYPE_GEOMETRY, geo)), "out", this.impl, "point")

				var pos = this.query_param("pos").value
				Blueprint.connect(VariantProxy(Variant(pos)), "out", this.impl, "pos")

				return Blueprint.calc_output_value(this.impl, "cons")
			}
		}

		return nil
	}
}