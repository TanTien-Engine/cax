import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.node_editor" for NodeEditor
import "blueprint.nodes.subgraph" for Subgraph
import "blueprint.nodes.array" for Array
import "blueprint.nodes.number2" for Number2
import "network.vertex" for Vertex
import "network.pin" for Pin
import "network.vertex_shape" for SHAPE_PANEL
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_GEO_POINT, VAR_TYPE_SKETCH, VarGeometry, VarGeoPoint
import "sketchgraph.geo_helper" for GeoHelper
import "sketchgraph.util" for DRAW_SCALE
import "sketchgraph.nodes.draw" for Draw
import "sketchgraph.nodes.sk_solver" for SkSolver
import "sketchgraph.nodes.solver" for Solver
import "sketchnetwork.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT
import "sketchnetwork.context" for CONTEXT
import "maths.vector" for Vector2
import "graphics" for Painter, Graphics
import "geometry" for Point
import "maths" for Matrix44
import "math" for Math

var EDITOR = nil

class PinInfo
{
	init(geo, name, pos)
	{
		this.geo  = geo
		this.name = name
		this.pos  = pos
	}
}

class Sketchgraph is Vertex
{
	init()
	{
		super.init()

		this.shape = SHAPE_PANEL

		this.pin_types_f = [ VAR_TYPE_GEOMETRY ]
		this.pin_types_t = [ 
			[ VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT ]
		]

		this.pin_dynamic = false

		this.impl = Subgraph()

		this.draw_node = Draw()

		this.pins_info = []

		this.editor_pts = Array()
	}

	resolve_geo()
	{
		var geos = []
		for (var pin in this.pins_info) 
		{
			if (pin.geo is VarGeometry) {
				geos.add(Variant(VAR_TYPE_GEOMETRY, pin.geo))
			} else if (pin.geo is VarGeoPoint) {
				geos.add(Variant(VAR_TYPE_GEO_POINT, pin.geo))
			}
		}
		return Variant(geos)
	}

	calc_output_sketch()
	{
		var v_sketch = Blueprint.calc_output_value(this.impl, "sketch")
		this.prepare_output_sketch(v_sketch)
		return v_sketch
	}

	prepare_output_sketch(v_sketch)
	{
		if (v_sketch.type == VAR_TYPE_SKETCH) {
			v_sketch.value.selected = this.selected
		} else if (v_sketch.type == VAR_TYPE_ARRAY) {
			for (var i in v_sketch.value) {
				this.prepare_output_sketch(i)
			}
		}
	}

	get_title()
	{
		return this.impl.title
	}

	to_string(name) 
	{
		return this.impl.to_string(name)
	}

	on_selected() 
	{
		super.on_selected()

		CONTEXT.need_rebuild = true
	}

	on_deselected() 
	{ 
		super.on_deselected()

		CONTEXT.need_rebuild = true
	}

	draw(mt, cam_mt)
	{
		super.draw(mt, cam_mt)

		var mat = Matrix44.init()
		var s = this.draw_node.scale * 0.25
		mat.scale(s, s, s)
		mat.translate(this.pos.x, this.pos.y, 0)

		this.draw_node.draw_input(mat)
	}

	draw_pins(mat)
	{
		var pt = Painter.init()
		for (var i in 0 .. this.pins.count)
		{
			var pin = this.pins[i]
			var pos = this.pins_info[i].pos
			pt.add_circle(mat, pos[0], pos[1], 5.0, pin.color, 1.0, 12)
		}
		Graphics.draw_painter(pt)
	}

	load_from_file(editor, filepath)
	{
		this.impl.load_from_file(editor, filepath, editor)

		var v_sketch = this.calc_output_sketch()
		if (v_sketch) {
			this.reset_geos(v_sketch)
			this.reset_pins(v_sketch)
		}
	}

	reset_geos(v_sketch)
	{
		var solver = SkSolver()
		Blueprint.connect(VariantProxy(v_sketch), "out", solver, "sketch")

		var draw_geos = []

		draw_geos.add(Blueprint.calc_output_value(solver, "geos"))

		Blueprint.connect(VariantProxy(Variant(draw_geos)), "out", this.draw_node, "geo")
	}

	reset_pins(v_sketch)
	{
		this.pins_info.clear()

		for (var i in 0 .. this.impl.exports.count)
		{
			var v_out = Blueprint.calc_output_value(this.impl, i)
			if (v_out and this.is_point_geo(v_out))
			{
				var geo  = v_out.value
				var name = this.impl.exports[i].name
				var pos  = this.calc_geo_pos(geo, nil)
				this.pins_info.add(PinInfo(geo, name, pos))

				this.pins.add(Pin(this, 0))
			}
		}

		if (!this.pins_info.isEmpty) {
			this.fix_pins_pos(v_sketch)
		}
	}

	fix_pins_pos(v_sketch)
	{
		var solver = Solver()
		Blueprint.connect(VariantProxy(v_sketch.value.geos), "out", solver, "geo")
		Blueprint.connect(VariantProxy(v_sketch.value.cons), "out", solver, "cons")

		var solved = Blueprint.calc_output_value(solver, "geo")
		for (var pin in this.pins_info)
		{
			for (var geo in solved.value)
			{
				if (this.is_geo_id_equal(pin.geo, geo.value.id))
				{
					var pos = nil
					if (pin.geo is VarGeometry) {
						pos = this.calc_geo_pos(geo.value, nil)
					} else if (pin.geo is VarGeoPoint) {
						pos = this.calc_geo_pos(geo.value, pin.geo.point_id)
					}
					pin.pos[0] = pos[0]
					pin.pos[1] = pos[1]
				}
			}
		}
	}

	calc_pin_pos(pin)
	{
		for (var i in 0 .. this.pins.count)
		{
			if (this.pins[i] == pin)
			{
				var pos = this.pins_info[i].pos
				var x = pos[0] * this.draw_node.scale * 0.25 + this.pos.x
				var y = pos[1] * this.draw_node.scale * 0.25 + this.pos.y
				return Vector2(x, y)
			}
		}
		return nil
	}

	get_pin_name(pin)
	{
		for (var i in 0 .. this.pins.count) {
			if (this.pins[i] == pin) {
				return this.pins_info[i].name
			}
		}
		return "unknown"
	}

	get_input_geo(pin)
	{
		for (var i in 0 .. this.pins.count) {
			if (this.pins[i] == pin) {
				return this.pins_info[i].geo
			}
		}
		return nil
	}

	query_pin(name)
	{
		for (var i in 0 .. this.pins_info.count) {
			if (this.pins_info[i].name == name) {
				return this.pins[i]
			}
		}
		return nil
	}

	is_point_geo(v_geo)
	{
		if (v_geo.type == VAR_TYPE_GEOMETRY and v_geo.value.shape is Point) {
			return true
		} else if (v_geo.type == VAR_TYPE_GEO_POINT) {
			return true
		}
		return false
	}

	calc_geo_pos(geo, point_id)
	{
		if (geo is VarGeometry) {
			return GeoHelper.calc_pos(geo.shape, point_id)
		} else if (geo is VarGeoPoint) {
			return GeoHelper.calc_pos(geo.shape, geo.point_id)
		} else {		
			return nil
		}
	}

	get_geo_id(geo)
	{
		if (geo is VarGeometry) {
			return geo.id
		} else if (geo is VarGeoPoint) {
			return geo.geo_id
		} else {
			return nil
		}
	}

	is_geo_id_equal(geo, id)
	{
		if (geo is VarGeometry) {
			return geo.id == id
		} else if (geo is VarGeoPoint) {
			return geo.geo_id == id
		} else {
			return false
		}
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		this.editor_pts.list.clear()
		for (var pin in this.pins_info)
		{
			var x = pin.pos[0] * DRAW_SCALE
			var y = pin.pos[1] * DRAW_SCALE
			this.editor_pts.list.add(Variant(Vector2(x, y)))
		}

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)

		var v_sketch = this.calc_output_sketch()
		if (v_sketch) {
			this.reset_geos(v_sketch)
			this.fix_pins_pos(v_sketch)
		}
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		for (var i in 0 .. this.pins_info.count)
		{
			var src = this.editor_pts.list[i].value
			var dst = this.pins_info[i].pos

			var x = src.x / DRAW_SCALE
			var y = src.y / DRAW_SCALE
			dst[0] = x
			dst[1] = y

			var pin_name = this.pins_info[i].name
			var in_node = Blueprint.get_input_node(this.impl, pin_name)
			if (!in_node) {
				in_node = Number2()
				Blueprint.connect(in_node, "v2", this.impl, pin_name)
			}
			if (in_node is Number2) {
				in_node.value.set(x, y)
				Blueprint.send_pin_dirty_root(in_node.exports[0])
			}
		}

		CONTEXT.need_rebuild = true
	}
}