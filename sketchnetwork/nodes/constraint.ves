import "blueprint.blueprint" for Blueprint
import "network.vertex" for Vertex
import "network.vertex_shape" for SHAPE_ROD
import "sketchnetwork.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT
import "sketchnetwork.cons_helper" for ConsHelper

class Constraint is Vertex
{
	init(title, node)
	{
		super.init()

		this.shape = SHAPE_ROD

		this.pin_types_f = [ VAR_TYPE_CONSTRAINT ]
		this.pin_types_t = [ 
			[ VAR_TYPE_GEOMETRY ],
			[ VAR_TYPE_GEOMETRY ],
		]

		this.title = title
		this.impl = node
	}

	get_title()
	{
		return this.title
	}

	resolve_cons()
	{
		var pa = ConsHelper.get_start_pin(this)
		var pb = ConsHelper.get_end_pin(this)
		if (!pa and !pb) {
			return nil
		}

		if (pa) {
			Blueprint.connect(pa, this.impl.imports[0])
		}
		if (pb) {
			Blueprint.connect(pb, this.impl.imports[1])
		}

		return Blueprint.calc_output_value(this.impl, "cons")
	}

	to_string(name) 
	{
		var ret = ""
		for (var p in this.impl.params) {
			ret = ret + p.to_string(name + ".impl")
		}
		return ret
	}
}