import "blueprint.blueprint" for Blueprint
import "network.vertex" for Vertex
import "network.vertex_shape" for SHAPE_ROD
import "sketchnetwork.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT
import "sketchnetwork.cons_helper" for ConsHelper
import "geometry" for Point, Line, Circle, Arc, Ellipse

class PointOn is Vertex
{
	init()
	{
		super.init()

		this.shape = SHAPE_ROD

		this.pin_types_f = [ VAR_TYPE_CONSTRAINT ]
		this.pin_types_t = [ 
			[ VAR_TYPE_GEOMETRY ],
			[ VAR_TYPE_GEOMETRY ],
		]

		this.impl = nil
		this.title = "点在线上"
	}

	get_title()
	{
		return this.title
	}

	resolve_cons()
	{
		var impl = this.get_conn_impl()
		if (!impl) {
			return nil
		}

		var pa = ConsHelper.get_start_pin(this)
		var pb = ConsHelper.get_end_pin(this)
		if (!pa and !pb) {
			return nil
		}

		if (pa) {
			Blueprint.connect(pa, impl.imports[0])
		}
		if (pb) {
			Blueprint.connect(pb, impl.imports[1])
		}

		return Blueprint.calc_output_value(impl, "cons")
	}

	on_connection_changed()
	{
		this.impl = nil
	}

	get_conn_impl()
	{
		if (!this.impl) {
			this.impl = this.create_conn_impl()
		}
		return this.impl
	}

	create_conn_impl()
	{
		var sa = ConsHelper.get_start_shape(this)
		var sb = ConsHelper.get_end_shape(this)		
		if (!sa or !sb) {
			return nil
		}

		if (!(sa is Point) and !(sb is Point)) {
			return nil
		}

		if (sa is Line or sb is Line) 
		{
			this.title = "点在线上"
			import "sketchgraph.nodes.cons_nodes" for PointOnLine
			return PointOnLine()
		} 
		else if (sa is Circle or sb is Circle) 
		{
			this.title = "点在圆上"
			import "sketchgraph.nodes.cons_nodes" for PointOnCircle
			return PointOnCircle()
		} 
		else if (sa is Arc or sb is Arc) 
		{
			this.title = "点在弧上"
			import "sketchgraph.nodes.cons_nodes" for PointOnArc
			return PointOnArc()
		} 
		else if (sa is Ellipse or sb is Ellipse) 
		{
			this.title = "点在椭圆上"
			import "sketchgraph.nodes.cons_nodes" for PointOnEllipse
			return PointOnEllipse()
		}

		return nil
	}
}