import "blueprint.nodes.wrapper" for Wrapper
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint

class SubSolver is Wrapper
{
	init(solver)
	{
		super.init(solver)

		this.v_geos = nil
	}

	calc_value(idx)
	{
		if (this.v_geos) {
			return Variant(this.v_geos)
		} else {
			return super.calc_value(idx)
		}
	}

	remap_geos(geos)
	{
		this.v_geos = []

		var in_geos = Blueprint.calc_input_value(this.impl, "geo")
		for (var i in in_geos.value) {
			for (var j in geos.value) {
				if (i.value.id == j.value.id) {
					this.v_geos.add(j)
				}
			}
		}

		Blueprint.send_pin_dirty_root(this.impl.exports[0])
	}
}