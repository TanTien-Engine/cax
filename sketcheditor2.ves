import "blueprint.blueprint" for Blueprint
import "network.edit_op" for EditOP as NetworkEditOP
import "editor.editor" for Editor
import "sketchnetwork.scene" for Scene
import "sketchnetwork.context" for CONTEXT
import "sketchnetwork.nodes.sketchgraph" for Sketchgraph
import "filesystem" for Filesystem

class Sketcheditor2 is Editor
{
	load()
	{
		super.load()

		this.nodes_op = NetworkEditOP(this.camera, this.scene_stack, this.popup_cb)
		this.editop = this.nodes_op

		this.prepare_nodes()

		this.scene = Scene()

		import "blueprint.nodes.array" for Array
		this.all_geos = Array()

		import "sketchgraph.nodes.draw" for Draw
		this.render_node = Draw()

		Blueprint.connect(this.all_geos, 0, this.render_node, 1)		
	}

	prepare_nodes()
	{
		this.clear_popup_nodes()

		import "sketchnodes2" for SKETCH_NODES2
		for (var node in SKETCH_NODES2) {
			super.add_popup_node(node)
		}
	}

	rebuild_all_geos()
	{
		this.all_geos.list.clear()

		var scene = this.scene_stack.root()

		var bp_nodes = []
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node) {
				bp_nodes.add(bp_node)
			}
		}

		if (!bp_nodes.isEmpty) {
			this.scene.resolve(bp_nodes, this.all_geos.list)
		}
	}

	draw_preview()
	{
		if (this.scene_stack.bp_dirty or CONTEXT.need_rebuild)
		{
			this.rebuild_all_geos()

			Blueprint.send_pin_dirty_root(this.all_geos.exports[0])

			CONTEXT.need_rebuild = false
		}

		super.draw_preview()

		if (this.render_node) {
			this.render_node.render_run()
		}	
	}

	load_file_imports()
	{
		return super.load_file_imports() + "
import \"network.network\" for Network
"
	}

	subgraph_from_file(filepath)
	{
		var old_dir = Filesystem.get_asset_base_dir()
		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(filepath))

		var node = Sketchgraph()
		node.load_from_file(this, filepath)

		if (old_dir != "") {
			Filesystem.set_asset_base_dir(old_dir)
		}

		return node
	}
}