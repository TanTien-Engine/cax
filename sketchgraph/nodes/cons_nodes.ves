import "sketchgraph.nodes.binary_cons" for BinaryCons
import "sketchgraph.nodes.unary_cons" for UnaryCons

// basic

class Distance is BinaryCons
{
	init()
	{
		super.init("distance", "dist", 0.0)
	}
}

class Angle is BinaryCons
{
	init()
	{
		super.init("angle", "angle", 0.0)
	}
}

class Parallel is BinaryCons
{
	init()
	{
		super.init("parallel")
	}
}

class Perpendicular is BinaryCons
{
	init()
	{
		super.init("perpendicular")
	}
}

class Coincident is BinaryCons
{
	init()
	{
		super.init("coincident")
	}
}

class Horizontal is BinaryCons
{
	init()
	{
		super.init("horizontal")
	}
}

class Vertical is BinaryCons
{
	init()
	{
		super.init("vertical")
	}
}

// point on

class PointOnLine is BinaryCons
{
	init()
	{
		super.init("point_on_line")
	}
}

class PointOnCircle is BinaryCons
{
	init()
	{
		super.init("point_on_circle")
	}
}

class PointOnArc is BinaryCons
{
	init()
	{
		super.init("point_on_arc")
	}
}

class PointOnEllipse is BinaryCons
{
	init()
	{
		super.init("point_on_ellipse")
	}
}

class PointOnPerpBisector is BinaryCons
{
	init()
	{
		super.init("point_on_perp_bisector")
	}
}

class MidpointOnLine is BinaryCons
{
	init()
	{
		super.init("midpoint_on_line")
	}
}

// tangent

class Tangent is BinaryCons
{
	init()
	{
		super.init("tangent")
	}
}

class TangentCircumf is BinaryCons
{
	init()
	{
		super.init("tangent_circumf")
	}
}

// params

class CircleRadius is UnaryCons
{
	init()
	{
		super.init("circle_radius", "r", 1.0)
	}
}

class CircleDiameter is UnaryCons
{
	init()
	{
		super.init("circle_diameter", "d", 1.0)
	}
}

class ArcRadius is UnaryCons
{
	init()
	{
		super.init("arc_radius", "r", 1.0)
	}
}

class ArcDiameter is UnaryCons
{
	init()
	{
		super.init("arc_diameter", "d", 1.0)
	}
}