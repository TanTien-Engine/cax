import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.array" for Array
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.blueprint" for Blueprint
import "blueprint.node_editor" for NodeEditor
import "blueprint.node_helper" for NodeHelper
import "blueprint.dirty_types" for DIRTY_EDITOR
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_GEO_POINT, VarGeometry
import "sketchgraph.context" for CONTEXT
import "sketchgraph.util" for DRAW_SCALE
import "sketchgraph.geo_helper" for GeoHelper
import "maths.vector" for Vector2
import "maths.calc" for Calc
import "geometry" for Arc as tt_Arc
import "math" for Math

var EDITOR = nil

class Arc is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center",      VAR_TYPE_NUMBER2),
			Pin(this, "radius",      VAR_TYPE_NUMBER),
			Pin(this, "start_angle", VAR_TYPE_NUMBER),
			Pin(this, "end_angle",   VAR_TYPE_NUMBER),			
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("center", Vector2(0, 0)))
		this.params.add(NodeParam("radius", 1.0))
		this.params.add(NodeParam("start_angle", 0.0))
		this.params.add(NodeParam("end_angle",   Math.pi() * 0.5))

		this.layout()

		this.geo_id = CONTEXT.advance_geo_id()

		this.editor_pts = Array()
	}

	calc_value(idx)
	{
		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")
		var start_angle = NodeHelper.calc_prop_value(this, "start_angle")
		var end_angle   = NodeHelper.calc_prop_value(this, "end_angle")

		var shape = tt_Arc.init(center.x, center.y, radius, start_angle, end_angle)

		if (idx == 0)
		{
			var geo = VarGeometry(this.geo_id, shape)
			GeoHelper.set_color(geo, this.selected)
			return Variant(VAR_TYPE_GEOMETRY, geo)
		}

		return nil
	}

	on_selected() 
	{
		super.on_selected()

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}

	on_deselected() 
	{ 
		super.on_deselected()

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}
	
	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")
		var start_angle = NodeHelper.calc_prop_value(this, "start_angle")
		var end_angle   = NodeHelper.calc_prop_value(this, "end_angle")
		var mid_angle   = (start_angle + end_angle) * 0.5

		this.editor_pts.list.clear()
		this.editor_pts.list.add(Variant(Vector2(center.x * DRAW_SCALE, center.y * DRAW_SCALE)))
		this.editor_pts.list.add(Variant(this.calc_draw_pos(center, radius, mid_angle)))
		this.editor_pts.list.add(Variant(this.calc_draw_pos(center, radius, start_angle)))
		this.editor_pts.list.add(Variant(this.calc_draw_pos(center, radius, end_angle)))

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.sync_data()

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}

	sync_data()
	{
		var c = this.editor_pts.list[0].value
		var m = this.editor_pts.list[1].value
		var s = this.editor_pts.list[2].value
		var e = this.editor_pts.list[3].value

		var center = this.query_param("center").value
		center.x = c.x / DRAW_SCALE
		center.y = c.y / DRAW_SCALE

		var radius = Calc.dis_pos_to_pos(c, m) / DRAW_SCALE
		this.query_param("radius").value = radius

		var sa = this.calc_angle(c, s)
		var ea = this.calc_angle(c, e)
		if (ea < sa) {
			ea = ea + Math.pi() * 2
		}
		this.query_param("start_angle").value = sa
		this.query_param("end_angle").value = ea

		s = this.calc_draw_pos(center, radius, sa)
		e = this.calc_draw_pos(center, radius, ea)
		this.editor_pts.list[2].value.set(s.x, s.y)
		this.editor_pts.list[3].value.set(e.x, e.y)
	}

	calc_draw_pos(center, radius, angle)
	{
		var x = center.x * DRAW_SCALE + radius * DRAW_SCALE * Math.cos(angle)
		var y = center.y * DRAW_SCALE + radius * DRAW_SCALE * Math.sin(angle)
		return Vector2(x, y)
	}

	calc_angle(center, pos)
	{
		return Math.atan2(pos.y - center.y, pos.x - center.x)
	}
}