import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.number2" for Number2
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.blueprint" for Blueprint
import "blueprint.node_editor" for NodeEditor
import "blueprint.node_helper" for NodeHelper
import "blueprint.dirty_types" for DIRTY_EDITOR
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY, VarGeometry
import "sketchgraph.context" for CONTEXT
import "sketchgraph.util" for DRAW_SCALE
import "sketchgraph.geo_helper" for GeoHelper
import "maths.vector" for Vector2
import "maths.calc" for Calc
import "geometry" for Circle as tt_Circle

var EDITOR = nil

class Circle is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center", VAR_TYPE_NUMBER2),
			Pin(this, "radius", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("center", Vector2(0, 0)))
		this.params.add(NodeParam("radius", 1.0))

		this.layout()

		this.geo_id = CONTEXT.advance_geo_id()

		this.editor_center = Number2()
		this.editor_outer = Number2()
	}

	calc_value(idx)
	{
		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")

		var shape = tt_Circle.init(center.x, center.y, radius)

		if (idx == 0)
		{
			var geo = VarGeometry(this.geo_id, shape)
			GeoHelper.set_color(geo, this.selected)
			return Variant(VAR_TYPE_GEOMETRY, geo)
		}
		
		return nil
	}

	on_selected() 
	{
		super.on_selected()

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}

	on_deselected() 
	{ 
		super.on_deselected()

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/circle_edit.ves")
		}

		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")

		var x = center.x * DRAW_SCALE
		var y = center.y * DRAW_SCALE
		var r = radius * DRAW_SCALE
		
		this.editor_center.value.set(x, y)
		this.editor_outer.value.set(x + r, y)

		Blueprint.connect(this.editor_center.exports[0], EDITOR.editor_node.imports[1])
		Blueprint.connect(this.editor_outer.exports[0], EDITOR.editor_node.imports[2])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		var center = this.query_param("center").value
		center.x = this.editor_center.value.x / DRAW_SCALE
		center.y = this.editor_center.value.y / DRAW_SCALE

		this.query_param("radius").value = Calc.dis_pos_to_pos(this.editor_center.value, this.editor_outer.value) / DRAW_SCALE

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}
}