import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_INTEGER
import "blueprint.variant_helper" for VariantHelper
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_GEO_PAIR, VAR_TYPE_CONSTRAINT
import "sketchgraph.solver" for Solver as SolverImpl

class Solver is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo",  [ VAR_TYPE_ARRAY, VAR_TYPE_GEOMETRY, VAR_TYPE_GEO_PAIR ]),
			Pin(this, "cons", [ VAR_TYPE_ARRAY, VAR_TYPE_CONSTRAINT ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_ARRAY, VAR_TYPE_GEOMETRY ]),
			Pin(this, "dof", VAR_TYPE_INTEGER),
		]

		this.layout()

		this.solver = nil
		this.results = nil
	}

	on_pin_dirty(pin)
	{
		super.on_pin_dirty(pin)

		this.solver = nil
		this.results = nil
	}

	calc_value(idx)
	{
		if (!this.solver) 
		{
			var v_cons = Blueprint.calc_input_value(this, 1)
			if (v_cons) 
			{
				var cons = VariantHelper.flatten_values(v_cons, VAR_TYPE_CONSTRAINT)
				this.solver = SolverImpl(cons)
			}
		}

		if (!this.solver) {
			return nil
		}

		if (idx == 0)
		{
			if (this.results) {
				return this.results
			}

			if (!this.results) 
			{
				var v_geos = Blueprint.calc_input_value(this, 0)
				if (!v_geos) {
					return nil
				}

				var geos = VariantHelper.flatten_values(v_geos, VAR_TYPE_GEOMETRY)

				this.results = this.solver.resolve(geos)
			}

			return this.results
		}
		else if (idx == 1)
		{
			var dof = this.solver.get_dof()
			return Variant(dof)
		}

		return nil
	}
}