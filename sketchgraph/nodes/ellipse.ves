import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.array" for Array
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.blueprint" for Blueprint
import "blueprint.node_editor" for NodeEditor
import "blueprint.node_helper" for NodeHelper
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY, VarGeometry
import "sketchgraph.context" for CONTEXT
import "sketchgraph.util" for DRAW_SCALE
import "maths.vector" for Vector2
import "maths.calc" for Calc
import "geometry" for Ellipse as tt_Ellipse
import "math" for Math

var EDITOR = nil

class Ellipse is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center", VAR_TYPE_NUMBER2),
			Pin(this, "radius", VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("center", Vector2(0, 0)))
		this.params.add(NodeParam("radius", Vector2(2.0, 1.0)))

		this.layout()

		this.geo_id = CONTEXT.advance_geo_id()

		this.editor_pts = Array()

		this.geo_col = [ 255, 255, 255, 255 ]
	}

	calc_value(idx)
	{
		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")

		var shape = tt_Ellipse.init(center.x, center.y, radius.x, radius.y)
		var geo = VarGeometry(this.geo_id, shape)
		geo.set_color(this.geo_col)
		return Variant(VAR_TYPE_GEOMETRY, geo)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")

		this.editor_pts.list.clear()
		this.editor_pts.list.add(Variant(Vector2(center.x * DRAW_SCALE, center.y * DRAW_SCALE)))
		this.editor_pts.list.add(Variant(Vector2((center.x + radius.x) * DRAW_SCALE, center.y * DRAW_SCALE)))
		this.editor_pts.list.add(Variant(Vector2(center.x * DRAW_SCALE, (center.y + radius.y) * DRAW_SCALE)))

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.sync_data()

		Blueprint.send_pin_dirty_root(this.exports[0])
	}

	sync_data()
	{
		var c = this.editor_pts.list[0].value
		var x = this.editor_pts.list[1].value
		var y = this.editor_pts.list[2].value

		var center = this.query_param("center").value
		center.x = c.x / DRAW_SCALE
		center.y = c.y / DRAW_SCALE

		var radius = this.query_param("radius").value
		radius.x = (x.x - c.x) / DRAW_SCALE
		radius.y = (y.y - c.y) / DRAW_SCALE

		this.editor_pts.list[1].value.set(x.x, c.y)
		this.editor_pts.list[2].value.set(c.x, y.y)
	}
}