import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.node_helper" for NodeHelper
import "sketchgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_GEO_POINT, VAR_TYPE_GEO_PAIR, VAR_TYPE_CONSTRAINT, VarConstraint
import "sketchgraph.context" for CONTEXT

class UnaryCons is Node
{
	init(cons_type, val_name, value)
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_GEO_POINT, VAR_TYPE_GEO_PAIR ]),
			Pin(this, val_name, VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "cons", VAR_TYPE_CONSTRAINT),
		]

		this.params.add(NodeParam("driving", true))

		this.params.add(NodeParam(val_name, value))

		this.layout()

		this.cons_type = cons_type

		this.cons_id = CONTEXT.advance_cons_id()

		this.val_name = val_name
	}

	calc_value(idx)
	{
		var geo = nil
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (v_geo) {
			geo = v_geo.value
		}

		var val = NodeHelper.calc_prop_value(this, this.val_name)

		var driving = this.query_param("driving").value

		var cons = VarConstraint(this.cons_id, this.cons_type, geo, nil, val, driving)
		return Variant(VAR_TYPE_CONSTRAINT, cons)
	}	
}