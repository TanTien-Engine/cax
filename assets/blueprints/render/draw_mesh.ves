var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "geos"
node0.var_type = "array"

_editor.add_node(node0, 1058.5131816029, -148.71746505925)

var node1 = ::rendergraph::nodes::clear::Clear()

node1.masks = [ "color", "depth" ]
node1.values = { "color" : [ 0, 0, 0, 0 ] }

_editor.add_node(node1, 360.19729517107, 294.19647127855)

var node2 = ::blueprint::nodes::perspective::Perspective()

node2.fovy = 45
node2.aspect = 0
node2.znear = 0.01
node2.zfar = 100

_editor.add_node(node2, -633.99599251269, 163.8399246789)

var node3 = ::blueprint::nodes::proxy::Proxy()

node3.real_name = "view_cam"
node3.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node3, -786.07021077149, 73.201048706215)

var node4 = ::blueprint::nodes::number3::Number3()

node4.value.set(5.9766573905945, 5.6433238983154, 5.3099908828735)

_editor.add_node(node4, -872.04649965006, -230.7272977224)

var node5 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node5, 1006.2254582471, -601.81666748678)

var node6 = ::rendergraph::nodes::texture::Texture()
node6.query_param("unif_name").value = "u_tex"
node6.gamma_correction = false
node6.mipmap = false
node6.init_texture(0, 0, "rgb")

_editor.add_node(node6, 474.40405076971, -784.61954261786)

var node7 = ::rendergraph::nodes::texture::Texture()
node7.query_param("unif_name").value = "u_tex"
node7.gamma_correction = false
node7.mipmap = false
node7.init_texture(0, 0, "r16f")

_editor.add_node(node7, 720.05358296636, -779.70827458377)

var node8 = ::rendergraph::nodes::texture::Texture()
node8.query_param("unif_name").value = "u_tex"
node8.gamma_correction = false
node8.mipmap = false
node8.init_texture(0, 0, "rgb16f")

_editor.add_node(node8, 942.95412422541, -781.75098051994)

var node9 = ::rendergraph::nodes::render_buffer::RenderBuffer()

node9.init_rbo(0, 0, "depth_component")

_editor.add_node(node9, 761.28070305769, -623.97703707472)

var node10 = ::blueprint::nodes::commentary::Commentary()

node10.set_size(934.75103759766, 556.74530029297)
node10.title = "GBuffer"

_editor.add_node(node10, 797.3810625679, -480.95532357993)

var node11 = ::rendergraph::nodes::draw::Draw()

node11.set_prim_type("tri_strip")
node11.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less", "clip_plane" : false }
node11.skip = false

_editor.add_node(node11, 1850.7890513854, -817.59943915683)

var node12 = ::rendergraph::nodes::shader::Shader()
node12.query_param("inc_dir").value = ""

node12.vs = "
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

void main()
{
	gl_Position = vec4(aPos, 1.0);
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node12.tcs = ""
node12.tes = ""
node12.gs = ""
node12.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform UBO
{
	float scale;
	float depthThreshold;
	float normalThreshold;
};

uniform sampler2D main_tex;
uniform sampler2D cam_depth_tex;
uniform sampler2D cam_normal_tex;

vec4 alphaBlend(vec4 top, vec4 bottom)
{
	vec3 color = (top.rgb * top.a) + (bottom.rgb * (1 - top.a));
	float alpha = top.a + bottom.a * (1 - top.a);

	return vec4(color, alpha);
}

void main()
{
	float depth = texture(cam_depth_tex, TexCoord).r;

	float halfScaleFloor = floor(scale * 0.5);
	float halfScaleCeil = ceil(scale * 0.5);

	vec2 _MainTex_TexelSize = vec2(1.0/1024.0, 1.0/768.0);

	vec2 bottomLeftUV = TexCoord - vec2(_MainTex_TexelSize.x, _MainTex_TexelSize.y) * halfScaleFloor;
	vec2 topRightUV = TexCoord + vec2(_MainTex_TexelSize.x, _MainTex_TexelSize.y) * halfScaleCeil;  
	vec2 bottomRightUV = TexCoord + vec2(_MainTex_TexelSize.x * halfScaleCeil, -_MainTex_TexelSize.y * halfScaleFloor);
	vec2 topLeftUV = TexCoord + vec2(-_MainTex_TexelSize.x * halfScaleFloor, _MainTex_TexelSize.y * halfScaleCeil);

	vec3 normal0 = texture(cam_normal_tex, bottomLeftUV).rgb;
	vec3 normal1 = texture(cam_normal_tex, topRightUV).rgb;
	vec3 normal2 = texture(cam_normal_tex, bottomRightUV).rgb;
	vec3 normal3 = texture(cam_normal_tex, topLeftUV).rgb;

	vec3 normalFiniteDifference0 = normal1 - normal0;
	vec3 normalFiniteDifference1 = normal3 - normal2;
	float edgeNormal = sqrt(dot(normalFiniteDifference0, normalFiniteDifference0) + dot(normalFiniteDifference1, normalFiniteDifference1));
	edgeNormal = edgeNormal > normalThreshold ? 1 : 0;

	float depth0 = texture(cam_depth_tex, bottomLeftUV).r;
	float depth1 = texture(cam_depth_tex, topRightUV).r;
	float depth2 = texture(cam_depth_tex, bottomRightUV).r;
	float depth3 = texture(cam_depth_tex, topLeftUV).r;

	float depthFiniteDifference0 = depth1 - depth0;
	float depthFiniteDifference1 = depth3 - depth2;
	float edgeDepth = sqrt(pow(depthFiniteDifference0, 2) + pow(depthFiniteDifference1, 2)) * 100;	
	edgeDepth = (edgeDepth) > depthThreshold ? 1 : 0;

	float edge = max(edgeDepth, edgeNormal);

	vec4 _Color = vec4(0.0, 0.0, 0.0, 1.0);
	//vec4 _Color = vec4(1.0);
	vec4 edgeColor = vec4(_Color.rgb, _Color.a * edge);

	vec4 color = texture(main_tex, TexCoord);
	FragColor = alphaBlend(edgeColor, color);
}
"
node12.cs = ""
node12.render_gen()
node12.set_uniform("scale", [ 1 ])
node12.set_uniform("normalThreshold", [ 0.35301756858826 ])

_editor.add_node(node12, 1456.0473424022, -843.15563683398)

var node13 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node13.type = "quad"
node13.layout = [ "position", "texture" ]
node13.shape_params = {  }

_editor.add_node(node13, 1639.493374151, -884.79448653931)

var node14 = ::rendergraph::nodes::clear::Clear()

node14.masks = [ "color" ]
node14.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node14, 1620.5813407813, -636.93494254883)

var node15 = ::blueprint::nodes::commentary::Commentary()

node15.set_size(635.08331298828, 464.41665649414)
node15.title = "Outline"

_editor.add_node(node15, 1629.0608817969, -515.58837882813)

var node16 = ::rendergraph::nodes::pass::Pass()

node16.once = false

_editor.add_node(node16, 2594.1057567941, -694.26369554953)

var node17 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node17, 2432.5442579609, -787.59767915388)

var node18 = ::rendergraph::nodes::texture::Texture()
node18.query_param("unif_name").value = "u_tex"
node18.gamma_correction = false
node18.mipmap = false
node18.init_texture(0, 0, "rgb")

_editor.add_node(node18, 2169.5975193976, -1011.5945192769)

var node19 = ::rendergraph::nodes::draw::Draw()

node19.set_prim_type("tri_strip")
node19.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less", "clip_plane" : false }
node19.skip = false

_editor.add_node(node19, 2659.8492689063, -983.98777384766)

var node20 = ::rendergraph::nodes::shader::Shader()
node20.query_param("inc_dir").value = ""

node20.vs = "
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

void main()
{
	gl_Position = vec4(aPos, 1.0);
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node20.tcs = ""
node20.tes = ""
node20.gs = ""
node20.fs = "
#version 330
out vec4 FragColor;

uniform sampler2D tex;

in vec2 TexCoord;

void main() 
{
	const float FXAA_REDUCE_MIN = 1.0 / 128.0;
	const float FXAA_REDUCE_MUL = 1.0 / 8.0;
	const float FXAA_SPAN_MAX = 8.0;

	vec2 screenSizeInv = 1.0 / textureSize(tex, 0);
	
	vec2 tcrgbNW = (TexCoord + vec2(-1.0, -1.0) * screenSizeInv);
	vec2 tcrgbNE = (TexCoord + vec2(1.0, -1.0) * screenSizeInv);
	vec2 tcrgbSW = (TexCoord + vec2(-1.0, 1.0) * screenSizeInv);
	vec2 tcrgbSE = (TexCoord + vec2(1.0, 1.0) * screenSizeInv);
	vec2 tcrgbM = vec2(TexCoord);
	
	vec3 rgbNW = textureLod(tex, tcrgbNW, 0.0).rgb;
	vec3 rgbNE = textureLod(tex, tcrgbNE, 0.0).rgb;
	vec3 rgbSW = textureLod(tex, tcrgbSW, 0.0).rgb;
	vec3 rgbSE = textureLod(tex, tcrgbSE, 0.0).rgb;
	vec4 texColor = textureLod(tex, tcrgbM, 0.0);
	vec3 rgbM  = texColor.rgb;
	vec3 luma = vec3(0.299, 0.587, 0.114);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot(rgbM,  luma);
	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
	
	vec2 dir;
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
	
	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
						  (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
	
	float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
	dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
			  max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
			  dir * rcpDirMin)) * screenSizeInv;
			  
	vec3 rgbA = 0.5 * (
		textureLod(tex, TexCoord + dir * (1.0 / 3.0 - 0.5), 0.0).rgb +
		textureLod(tex, TexCoord + dir * (2.0 / 3.0 - 0.5), 0.0).rgb);
	FragColor.rgb = rgbA * 0.5 + 0.25 * ( // vec3 rgbB
		textureLod(tex, TexCoord + dir * -0.5, 0.0).rgb +
		textureLod(tex, TexCoord + dir * 0.5, 0.0).rgb);
		
	// float lumaB = dot(rgbB, luma);
	float lumaB = dot(FragColor.rgb, luma);
	if ((lumaB < lumaMin) || (lumaB > lumaMax)) FragColor.rgb = rgbA;
	// else FragColor.rgb = rgbB;
}
"
node20.cs = ""
node20.render_gen()

_editor.add_node(node20, 2439.6102256368, -918.82419357788)

var node21 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node21.type = "quad"
node21.layout = [ "position", "texture" ]
node21.shape_params = {  }

_editor.add_node(node21, 2504.1860373729, -1082.7474231804)

var node22 = ::blueprint::nodes::commentary::Commentary()

node22.set_size(682.41668701172, 682.41668701172)
node22.title = "FXAA"

_editor.add_node(node22, 2394.868311875, -602.64295939453)

var node23 = ::blueprint::nodes::input::Input()

node23.var_name = "light_pos"
node23.var_type = "num3"

_editor.add_node(node23, -966.11348254597, -132.55797934742)

var node24 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node24, -713.26648090809, -146.55319659678)

var node25 = ::blueprint::nodes::is_null::IsNull()

_editor.add_node(node25, -839.22347266079, -123.69433532918)

var node26 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node26, 439.55755615234, -635.83148803711)

var node27 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node27, 2133.8637990142, -891.18750354357)

var node28 = ::blueprint::nodes::orthographic::Orthographic()

node28.left = -1.5
node28.right = 1
node28.bottom = 0
node28.top = 1
node28.near = 1
node28.far = -1

_editor.add_node(node28, -771.56467389827, 309.52770768744)

var node29 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node29, -1215.7241543158, 431.2175287042)

var node30 = ::blueprint::nodes::split::Split()

_editor.add_node(node30, -1084.7662132159, 430.65306990171)

var node31 = ::blueprint::nodes::divide::Divide()

_editor.add_node(node31, -947.03458011229, 460.57017137206)

var node32 = ::blueprint::nodes::number::Number()

node32.value = 0.32784762978554

_editor.add_node(node32, -1199.3062813481, 322.43876159183)

var node33 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node33, -413.55674448974, 215.74705241061)

var node34 = ::blueprint::nodes::input::Input()

node34.var_name = "ortho"
node34.var_type = "bool"

_editor.add_node(node34, -611.32443756782, 601.71099214835)

var node35 = ::blueprint::nodes::store::Store()

node35.var_name = "ortho"

_editor.add_node(node35, -454.99061590778, 600.18507075492)

var node36 = ::blueprint::nodes::load::Load()

node36.var_name = "ortho"

_editor.add_node(node36, -576.84605833723, 276.85617959175)

var node37 = ::blueprint::nodes::load::Load()

node37.var_name = "ortho"

_editor.add_node(node37, 997.57368297679, -1026.9346942078)

var node38 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node38, 1136.9570067209, -1047.0249629162)

var node39 = ::blueprint::nodes::number::Number()

node39.value = 0.0001

_editor.add_node(node39, 996.93920714177, -1083.2246731741)

var node40 = ::blueprint::nodes::number::Number()

node40.value = 0.15

_editor.add_node(node40, 993.5241920331, -1150.159968538)

var node41 = ::blueprint::nodes::number2::Number2()

node41.value.set(0.18203972280025, 0.87092864513397)

_editor.add_node(node41, -1071.1835868223, 220.18406105164)

var node42 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node42, -1073.530644213, 295.88628710736)

var node43 = ::blueprint::nodes::integer::Integer()

node43.value = 10

_editor.add_node(node43, -1204.5450592933, 260.49376363056)

var node44 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node44, -935.68611742774, 196.53887819146)

var node45 = ::blueprint::nodes::integer::Integer()

node45.value = 3

_editor.add_node(node45, -1068.5632900683, 146.24425306656)

var node46 = ::blueprint::nodes::input::Input()

node46.var_name = "model"
node46.var_type = "mat4"

_editor.add_node(node46, -598.13755669486, 514.88062731543)

var node47 = ::blueprint::nodes::property::Property()

node47.var_name = "no_bg"
node47.var_type = "bool"

_editor.add_node(node47, 358.37557890986, 421.60414954163)

var node48 = ::rendergraph::nodes::clear::Clear()

node48.masks = [ "color", "depth" ]
node48.values = { "color" : [ 0.5, 0.5, 0.5, 1 ] }

_editor.add_node(node48, 362.42477948575, 120.40323384557)

var node49 = ::blueprint::nodes::branch::Branch()

_editor.add_node(node49, 516.48616491947, 306.41632729775)

var node50 = ::blueprint::nodes::subgraph::Subgraph()
node50.load_from_file(_editor, "draw_mesh_single.ves")

_editor.add_node(node50, 1256.5201463633, -222.29730192206)

var node51 = ::blueprint::nodes::number3::Number3()

node51.value.set(1, 1, 1)

_editor.add_node(node51, 931.33639148814, -344.11443944939)

var node52 = ::blueprint::nodes::store::Store()

node52.var_name = "proj_mat"

_editor.add_node(node52, -276.64805297852, 225.30061340332)

var node53 = ::blueprint::nodes::load::Load()

node53.var_name = "proj_mat"

_editor.add_node(node53, 1065.7292297456, -312.23642206992)

var node54 = ::blueprint::nodes::store::Store()

node54.var_name = "cam_pos"

_editor.add_node(node54, -631.22764539482, 37.266996222882)

var node55 = ::blueprint::nodes::load::Load()

node55.var_name = "cam_pos"

_editor.add_node(node55, 1063.2772701549, -260.42996648101)

var node56 = ::blueprint::nodes::store::Store()

node56.var_name = "light_pos"

_editor.add_node(node56, -574.01604614258, -133.68508300781)

var node57 = ::blueprint::nodes::load::Load()

node57.var_name = "light_pos"

_editor.add_node(node57, 927.88202992875, -265.28451007637)

var node58 = ::blueprint::nodes::store::Store()

node58.var_name = "model_mat"

_editor.add_node(node58, -457.02821988192, 512.48371138139)

var node59 = ::blueprint::nodes::load::Load()

node59.var_name = "model_mat"

_editor.add_node(node59, 924.7941658141, -208.61685315502)

var node60 = ::blueprint::nodes::commentary::Commentary()

node60.set_size(1075.4, 950)
node60.title = "Params"

_editor.add_node(node60, -744.38714599609, 669.20023193359)

var node61 = ::blueprint::nodes::input::Input()

node61.var_name = "selected"
node61.var_type = "array"

_editor.add_node(node61, 719.50815439776, 169.86033577406)

var node62 = ::rendergraph::nodes::pass::Pass()

node62.once = false

_editor.add_node(node62, 1485.0008839844, -164.61040243575)

var node63 = ::blueprint::nodes::subgraph::Subgraph()
node63.load_from_file(_editor, "draw_mesh_single.ves")

_editor.add_node(node63, 921.4307761154, 96.077600557283)

var node64 = ::blueprint::nodes::number3::Number3()

node64.value.set(1, 0, 0)

_editor.add_node(node64, 596.2470212402, -25.739536970047)

var node65 = ::blueprint::nodes::load::Load()

node65.var_name = "proj_mat"

_editor.add_node(node65, 730.63985949766, 6.1384804094229)

var node66 = ::blueprint::nodes::load::Load()

node66.var_name = "cam_pos"

_editor.add_node(node66, 728.18789990698, 57.944935998333)

var node67 = ::blueprint::nodes::load::Load()

node67.var_name = "light_pos"

_editor.add_node(node67, 592.79265968081, 53.090392402973)

var node68 = ::blueprint::nodes::load::Load()

node68.var_name = "model_mat"

_editor.add_node(node68, 589.70479556616, 109.75804932432)

Blueprint.connect(node50, "next", node62, "do")
Blueprint.connect(node5, "fbo", node62, "fbo")
Blueprint.connect(node62, "next", node16, "prev")
Blueprint.connect(node11, "next", node16, "do")
Blueprint.connect(node17, "fbo", node16, "fbo")
Blueprint.connect(node47, "var", node49, "cond")
Blueprint.connect(node1, "next", node49, "true")
Blueprint.connect(node48, "next", node49, "false")
Blueprint.connect(node46, "var", node58, "var")
Blueprint.connect(node58, "var", node68, "var")
Blueprint.connect(node58, "var", node59, "var")
Blueprint.connect(node41, "v2", node44, "a")
Blueprint.connect(node45, "v", node44, "b")
Blueprint.connect(node34, "var", node35, "var")
Blueprint.connect(node35, "var", node37, "var")
Blueprint.connect(node37, "var", node38, "cond")
Blueprint.connect(node39, "v", node38, "true")
Blueprint.connect(node40, "v", node38, "false")
Blueprint.connect(node35, "var", node36, "var")
Blueprint.connect(node32, "v", node42, "a")
Blueprint.connect(node43, "v", node42, "b")
Blueprint.connect(node29, "size", node30, "xy")
Blueprint.connect(node30, "x", node31, "a")
Blueprint.connect(node30, "y", node31, "b")
Blueprint.connect(node31, "v", node28, "aspect")
Blueprint.connect(node42, "v", node28, "scale")
Blueprint.connect(node44, "v", node28, "offset")
Blueprint.connect(node27, "size", node18, "size")
Blueprint.connect(node18, "tex", node20, "tex")
Blueprint.connect(node18, "tex", node17, "col0")
Blueprint.connect(node26, "size", node9, "size")
Blueprint.connect(node26, "size", node8, "size")
Blueprint.connect(node26, "size", node7, "size")
Blueprint.connect(node26, "size", node6, "size")
Blueprint.connect(node38, "result", node12, "depthThreshold")
Blueprint.connect(node7, "tex", node12, "cam_depth_tex")
Blueprint.connect(node8, "tex", node12, "cam_normal_tex")
Blueprint.connect(node6, "tex", node12, "main_tex")
Blueprint.connect(node6, "tex", node5, "col0")
Blueprint.connect(node7, "tex", node5, "col1")
Blueprint.connect(node8, "tex", node5, "col2")
Blueprint.connect(node9, "rbo", node5, "depth")
Blueprint.connect(node23, "var", node25, "in")
Blueprint.connect(node20, "out", node19, "shader")
Blueprint.connect(node21, "out", node19, "va")
Blueprint.connect(node14, "next", node11, "prev")
Blueprint.connect(node12, "out", node11, "shader")
Blueprint.connect(node13, "out", node11, "va")
Blueprint.connect(node25, "out", node24, "cond")
Blueprint.connect(node4, "v3", node24, "true")
Blueprint.connect(node23, "var", node24, "false")
Blueprint.connect(node24, "result", node56, "var")
Blueprint.connect(node56, "var", node67, "var")
Blueprint.connect(node56, "var", node57, "var")
Blueprint.connect(node3, "pos", node54, "var")
Blueprint.connect(node54, "var", node66, "var")
Blueprint.connect(node54, "var", node55, "var")
Blueprint.connect(node3, "zoom", node2, "fovy")
Blueprint.connect(node36, "var", node33, "cond")
Blueprint.connect(node28, "mat", node33, "true")
Blueprint.connect(node2, "mat", node33, "false")
Blueprint.connect(node33, "result", node52, "var")
Blueprint.connect(node52, "var", node65, "var")
Blueprint.connect(node49, "next", node63, "prev")
Blueprint.connect(node61, "var", node63, "geos")
Blueprint.connect(node68, "var", node63, "model")
Blueprint.connect(node3, "mat", node63, "view")
Blueprint.connect(node67, "var", node63, "light_pos")
Blueprint.connect(node64, "v3", node63, "light_col")
Blueprint.connect(node66, "var", node63, "cam_pos")
Blueprint.connect(node65, "var", node63, "projection")
Blueprint.connect(node52, "var", node53, "var")
Blueprint.connect(node63, "next", node50, "prev")
Blueprint.connect(node0, "var", node50, "geos")
Blueprint.connect(node59, "var", node50, "model")
Blueprint.connect(node3, "mat", node50, "view")
Blueprint.connect(node57, "var", node50, "light_pos")
Blueprint.connect(node51, "v3", node50, "light_col")
Blueprint.connect(node55, "var", node50, "cam_pos")
Blueprint.connect(node53, "var", node50, "projection")
