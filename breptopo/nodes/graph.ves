import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2, VAR_TYPE_ARRAY
import "blueprint.node_editor" for NodeEditor
import "blueprint.nodes.array" for Array
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_FACE
import "breptopo.variant" for VAR_TOPO_GRAPH
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.config" for POINT_RADIUS
import "maths.vector" for Vector2
import "maths.calc" for Calc
import "graphics" for Graphics
import "geometry" for Line
import "graph" for Graph as tt_Graph
import "breptopo" for TopoGraph as tt_TopoGraph

var EDITOR = nil

class Graph is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape", [ VAR_TOPO_SHAPE, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "graph", VAR_TOPO_GRAPH),
			Pin(this, "selected", VAR_TYPE_ARRAY),
		]

		this.layout()

		this.graph = nil

		this.edit_nodes = Array()
		this.edit_edges = Array()

		this.selected_faces = []
	}

	calc_value(idx)
	{
		if (!this.graph) {
			this.graph = this.build_graph()
		}

		if (idx == 0) {
			return Variant(VAR_TOPO_GRAPH, this.graph)
		} else if (idx == 1) {
			return Variant(this.selected_faces)
		}
	}

	build_graph()
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return nil
		}

		var shapes = []
		if (v_shape.type == VAR_TOPO_SHAPE)
		{
			shapes.add(v_shape.value)
		}
		else
		{
			for (var shape in v_shape.value) {
				shapes.add(shape.value)
			}
		}

		var topo_graph = tt_TopoGraph.init(shapes)
		var graph = topo_graph.get_graph()

		//this.init_nodes_pos(graph, this.nodes)

		this.rebuild_graph_drawable(graph)

		return topo_graph
	}

	to_string(name) 
	{
		var ret = super.to_string(name)
		return ret + "
%(name).nodes = %(this.edit_nodes.list)
"
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("../cax/assets/blueprints/editor/graph.ves")
		}

		Blueprint.connect(this.edit_nodes.exports[0], EDITOR.editor_node.imports[1])
		Blueprint.connect(this.edit_edges.exports[0], EDITOR.editor_node.imports[2])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		Graphics.on_cam_update(0, 0, 1)

		if (EDITOR) {
			EDITOR.draw()
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)

		this.update_selected()
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.update_nodes_pos(this.graph.get_graph())

		this.rebuild_edge_drawable(this.graph.get_graph())
	}

	on_mouse_scrolled(x, y, dx, dy) 
	{
		EDITOR.editor_node.on_mouse_scrolled(x, y, dx, dy) 
	}

	on_key_pressed(key) 
	{
		EDITOR.editor_node.on_key_pressed(key)
	}

	rebuild_graph_drawable(graph)
	{
		this.edit_nodes.list.clear()

		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var nodes = graph.get_nodes()
		for (var node in nodes)
		{
			var pos = node.get_pos()
			var x = (pos["x"] - 0.5) * w
			var y = (pos["y"] - 0.5) * h
			this.edit_nodes.list.add(Variant(VAR_TYPE_NUMBER2, Vector2(x, y)))
		}

		this.rebuild_edge_drawable(graph)
	}

	rebuild_edge_drawable(graph)
	{
		this.edit_edges.list.clear()

		var edges = graph.get_edges()
		for (var i in 0 .. edges.count / 2)
		{
			var n0 = this.edit_nodes.list[edges[i* 2]].value
			var n1 = this.edit_nodes.list[edges[i* 2 + 1]].value

			var geo = VarGeo()
			geo.shape = Line.init()
			geo.shape.set(n0.x, n0.y, n1.x, n1.y)
			this.edit_edges.list.add(Variant(VAR_TYPE_GEO, geo))
		}
	}

	init_nodes_pos(graph, points)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var nodes = graph.get_nodes()
		for (var i in 0 .. nodes.count)
		{
			var pos = points[i].value
			var x = pos.x / w + 0.5
			var y = pos.y / h + 0.5
			nodes[i].set_pos(x, y)
		}
	}

	update_nodes_pos(graph)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var nodes = graph.get_nodes()
		for (var i in 0 .. nodes.count)
		{
			var pos = this.edit_nodes.list[i].value
			var x = pos.x / w + 0.5
			var y = pos.y / h + 0.5
			nodes[i].set_pos(x, y)
		}
	}

	update_selected()
	{
		this.selected_faces.clear()

		var v_selected = Blueprint.calc_output_value(EDITOR.editor_node, "selected")
		if (!v_selected) {
			return
		}

		for (var v_pos in v_selected.value)
		{
			var node = this.query_node(v_pos.value)
			if (node)
			{
				var face = node.get_component("topo_shape")
				this.selected_faces.add(Variant(VAR_TOPO_FACE, face))
			}
		}
	}

	query_node(pos)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var nodes = this.graph.get_graph().get_nodes()
		for (var node in nodes)
		{
			var npos = node.get_pos()
			var nx = (npos["x"] - 0.5) * w
			var ny = (npos["y"] - 0.5) * h

			var dist = Calc.dis_pos_to_pos(pos, Vector2(nx, ny))
			if (dist < POINT_RADIUS) {
				return node
			}
		}

		return nil
	}
}