import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.dirty_types" for DIRTY_EDITOR
import "graph.nodes.draw" for Draw
import "partgraph.variant" for VAR_TOPO_SHAPE
import "breptopo.variant" for VAR_HIST_GRAPH, VAR_HIST_MGR
import "breptopo" for HistMgr

class HistGraph is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "hist_mgr", VAR_HIST_MGR),
			Pin(this, "selected", VAR_TYPE_ARRAY),
		]

		this.layout()

		this.hist_mgr = nil

		this.selected_shapes = []

		this.n_draw = Draw()
	}

	calc_value(idx)
	{
		if (!this.hist_mgr) {
			this.build_graph()
		}

		if (idx == 0) {
			return Variant(VAR_HIST_MGR, this.hist_mgr)
		} else if (idx == 1) {
			return Variant(this.selected_shapes)
		}
	}

	build_graph()
	{
		this.hist_mgr = HistMgr.init()

		var face_graph = this.hist_mgr.get_face_graph()
		var graph = face_graph.get_hist_graph()
		Blueprint.connect(VariantProxy(Variant(VAR_HIST_GRAPH, graph)), "out", this.n_draw, "graph")
	}

	draw(mt, cam_mt)
	{
		super.draw(mt, cam_mt)

		this.n_draw.draw_preview()
	}

	bind_editor()
	{
		return this.n_draw.bind_editor()
	}

	draw_editor() 
	{
		this.n_draw.draw_editor()
	}

	on_mouse_pressed(x, y, btn) 
	{
		this.n_draw.on_mouse_pressed(x, y, btn)

		this.update_selected()
	}

	on_mouse_dragged(x, y, btn) 
	{
		this.n_draw.on_mouse_dragged(x, y, btn)
	}

	on_mouse_scrolled(x, y, dx, dy) 
	{
		this.n_draw.on_mouse_scrolled(x, y, dx, dy)
	}

	on_key_pressed(key)
	{
		this.n_draw.on_key_pressed(key)
	}

	update_selected()
	{
		Blueprint.send_pin_dirty_root(this.exports[1], DIRTY_EDITOR)

		this.selected_shapes.clear()

		var v_selecteds = Blueprint.calc_output_value(this.n_draw, "selected")
		if (!v_selecteds) {
			return
		}

		for (var v_sel in v_selecteds.value)
		{
			var shp = v_sel.value.get_component("topo_shape")
			if (shp) {
				this.selected_shapes.add(Variant(VAR_TOPO_SHAPE, shp))
			}
		}
	}	
}