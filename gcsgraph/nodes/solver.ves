import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.variant_helper" for VariantHelper
import "gcsgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT
import "gcsgen" for GCS_Scene

class Solver is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo",  [ VAR_TYPE_ARRAY, VAR_TYPE_GEOMETRY ]),
			Pin(this, "cons", [ VAR_TYPE_ARRAY, VAR_TYPE_CONSTRAINT ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_ARRAY, VAR_TYPE_GEOMETRY ])
		]

		this.layout()

		this.scene = nil
	}

	on_pin_dirty(pin)
	{
		super.on_pin_dirty(pin)

		this.scene = nil
	}

	calc_value(idx)
	{
		var v_geos = Blueprint.calc_input_value(this, 0)
		if (!v_geos) {
			return nil
		}

		if (!this.scene) {
			this.scene = this.build_scene()
		}

		var geos = VariantHelper.flatten_values(v_geos, VAR_TYPE_GEOMETRY)
		var ret_geos = []
		for (var geo in geos) {
			ret_geos.add(Variant(VAR_TYPE_GEOMETRY, geo.clone()))
		}

		if (this.scene) 
		{
			var ids = []
			var shapes = []
			for (var v_geo in ret_geos) {
				ids.add(v_geo.value.id)
				shapes.add(v_geo.value.shape)
			}
			this.scene.solve(ids, shapes)

//			import "logger.logger" for Logger
//			Logger.info("solve")
		}

		return Variant(ret_geos)
	}

	build_scene()
	{
		var v_cons = Blueprint.calc_input_value(this, 1)
		if (!v_cons) {
			return nil
		}

//		import "logger.logger" for Logger
//		Logger.info("build scene")

		var cons = VariantHelper.flatten_values(v_cons, VAR_TYPE_CONSTRAINT)

		var scene = GCS_Scene.init()
		for (var c in cons) 
		{
			var i1 = 0
			var s1 = nil
			if (c.geo1) {
				i1 = c.geo1.id
				s1 = c.geo1.shape
			}

			var i2 = 0
			var s2 = nil
			if (c.geo2) {
				i2 = c.geo2.id
				s2 = c.geo2.shape
			}

			scene.add(c.id, c.type, i1, s1, i2, s2, c.val)
		}

		return scene
	}
}