import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.blueprint" for Blueprint
import "gcsgraph.variant" for VAR_TYPE_GEOMETRY, VarGeometry
import "gcsgraph.context" for CONTEXT
import "maths.vector" for Vector2
import "geometry" for Circle as tt_Circle

class Circle is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center", VAR_TYPE_NUMBER2),
			Pin(this, "radius", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("center", Vector2(0, 0)))
		this.params.add(NodeParam("radius", 1.0))

		this.layout()

		this.geo_id = CONTEXT.advance_geo_id()
	}

	calc_value(idx)
	{
		var cx = 0
		var cy = 0

		var center = this.query_param("center").value
		var v_center = Blueprint.calc_input_value(this, 0)
		if (v_center) {
			cx = v_center.value.x
			cy = v_center.value.y
		} else {
			cx = center.x
			cy = center.y
		}

		var rad = this.query_param("radius").value
		var v_rad = Blueprint.calc_input_value(this, 1)
		if (v_rad) {
			rad = v_rad.value
		}

		var shape = tt_Circle.init(cx, cy, rad)
		var geo = VarGeometry(this.geo_id, shape)
		return Variant(VAR_TYPE_GEOMETRY, geo)
	}
}