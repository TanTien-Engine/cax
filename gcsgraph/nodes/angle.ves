import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "gcsgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT, VarConstraint
import "gcsgraph.context" for CONTEXT

class Angle is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "a",     VAR_TYPE_GEOMETRY),
			Pin(this, "b",     VAR_TYPE_GEOMETRY),
			Pin(this, "angle", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "cons", VAR_TYPE_CONSTRAINT),
		]

		this.params.add(NodeParam("angle", 0.0))

		this.layout()

		this.cons_id = CONTEXT.advance_cons_id()
	}

	calc_value(idx)
	{
		var a = nil
		var b = nil
		var v_a = Blueprint.calc_input_value(this, 0)
		if (v_a) {
			a = v_a.value
		}
		var v_b = Blueprint.calc_input_value(this, 1)
		if (v_b) {
			b = v_b.value
		}

		var angle = this.query_param("angle").value
		var v_angle = Blueprint.calc_input_value(this, 2)
		if (v_angle) {
			angle = v_angle.value
		}

		var cons = VarConstraint(this.cons_id, "angle", a, b, angle)
		return Variant(VAR_TYPE_CONSTRAINT, cons)
	}
}