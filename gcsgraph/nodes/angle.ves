import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "gcsgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_CONSTRAINT
import "gcsgen" for GCS_Constraint

class Angle is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "a",     VAR_TYPE_GEOMETRY),
			Pin(this, "b",     VAR_TYPE_GEOMETRY),
			Pin(this, "angle", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "cons", VAR_TYPE_CONSTRAINT),
		]

		this.params.add(NodeParam("angle", 0.0))

		this.layout()

		this.cons = nil
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input)
		{
			if (pin.slot_idx == 2) {
				this.update_cons()
			} else {
				super.on_pin_dirty(pin)
				this.cons = nil
			}
		}
		else
		{
			super.on_pin_dirty(pin)
		}
	}

	on_param_dirty()
	{
		this.update_cons()
	}

	calc_value(idx)
	{
		if (!this.cons) {
			this.cons = this.build_cons()
		}

		return Variant(VAR_TYPE_CONSTRAINT, this.cons)
	}

	get_angle()
	{
		var angle = this.query_param("angle").value
		var v_angle = Blueprint.calc_input_value(this, 2)
		if (v_angle) {
			angle = v_angle.value
		}
		return angle
	}

	build_cons()
	{
		var a = nil
		var b = nil
		var v_a = Blueprint.calc_input_value(this, 0)
		if (v_a) {
			a = v_a.value
		}
		var v_b = Blueprint.calc_input_value(this, 1)
		if (v_b) {
			b = v_b.value
		}

		var angle = this.get_angle()

		return GCS_Constraint.init("angle", a, b, angle)
	}

	update_cons()
	{
		if (!this.cons) {
			return
		}

		var angle = this.get_angle()
		this.cons.set_value(angle)
	}
}