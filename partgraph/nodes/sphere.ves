import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_helper" for NodeHelper
import "partgraph.variant" for VAR_TOPO_SHAPE
import "partgraph" for PrimMaker
import "math" for Math

class Sphere is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "radius", VAR_TYPE_NUMBER),
			Pin(this, "angle", VAR_TYPE_NUMBER),			
		]
		this.exports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
		]

		this.params.add(NodeParam("radius", 1.0, { "region" : 2 }))
		this.params.add(NodeParam("angle", Math.pi() * 2, { "region" : Math.pi() * 2 }))

		this.layout()
	}

	calc_value(idx)
	{
		var radius = NodeHelper.calc_prop_value(this, "radius")
		var angle = NodeHelper.calc_prop_value(this, "angle")

		var shape = nil
		if (angle == Math.pi() * 2) {
			shape = PrimMaker.sphere(radius)
		} else {
			shape = PrimMaker.sphere_with_angle(radius, angle)
		}
		
		if (shape) {
			return Variant(VAR_TOPO_SHAPE, shape)
		} else {
			return nil
		}
	}
}