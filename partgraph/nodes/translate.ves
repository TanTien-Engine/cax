import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER3
import "blueprint.node_helper" for NodeHelper
import "partgraph.variant" for VAR_TOPO_SHAPE
import "partgraph.node_helper" for NodeHelper as pg_NodeHelper
import "maths.vector" for Vector3
import "partgraph" for TopoAlgo
import "breptopo" for HistGraph

class Translate is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
			Pin(this, "offset", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
		]

		this.params.add(NodeParam("offset", Vector3(0, 0, 0), { "region" : 2 }))

		this.layout()

		this.op_id = -1
	}

	calc_value(idx)
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return nil
		}

		if (this.op_id < 0) {
			this.op_id = HistGraph.get_next_op_id()
		}

		var offset = NodeHelper.calc_prop_value(this, "offset")
		var shape = TopoAlgo.translate(v_shape.value, offset.x, offset.z, offset.y, this.op_id)
		if (shape) {
			return Variant(VAR_TOPO_SHAPE, shape)
		} else {
			return nil
		}
	}

	compile_graph(G, idx)
	{
		var i_shp = pg_NodeHelper.compile_graph(this, 0, G)

		var offset = NodeHelper.calc_prop_value(this, "offset")
		var i_offset = G.add_number3_node(offset.x, offset.z, offset.y, "offset")

		return G.add_translate_node(i_shp, i_offset)
	}
}