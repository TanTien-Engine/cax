import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NODE, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_EDGE
import "partgraph" for BRepSelector, BRepTools
import "maths.vector" for Vector2
import "graphics" for Graphics
import "keyboard" for Keyboard

class EdgeSelector is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape",  VAR_TOPO_SHAPE),
			Pin(this, "camera", VAR_TYPE_NODE),
		]
		this.exports = [
			Pin(this, "edges", VAR_TYPE_ARRAY),
		]

		this.layout()

		this.selected_edges = nil
		this.selected_indices = nil
	}

	calc_value(idx)
	{
		if (!this.selected_edges and this.selected_indices) {
			this.load_selected(this.selected_indices)
		}
		return Variant(this.selected_edges)
	}

	to_string(name) 
	{
		var indices = this.store_selected()
		return "
%(name).selected_indices = %(indices)
"
	}

	on_mouse_pressed(x, y, btn) 
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return nil
		}

		var v_cam_node = Blueprint.calc_input_value(this, 1)
		if (!v_cam_node) {
			return
		}

		var cam = v_cam_node.value.cam

		var pos = cam.position
		var dir = cam.screen2dir(Vector2(x - Graphics.get_width() * 0.5, Graphics.get_height() * 0.5 - y))
		var edge = BRepSelector.select_edge(v_shape.value, [ pos.x, pos.y, pos.z ], [ dir.x, dir.y, dir.z ])

		if (!this.selected_edges) {
			this.selected_edges = []
		}

		var dirty = false
		if (!Keyboard.is_ctrl_pressed()) {
			this.selected_edges.clear()
			dirty = true
		}
		if (edge) {
			this.selected_edges.add(Variant(VAR_TOPO_EDGE, edge))
			dirty = true
		}

		if (dirty) {
			Blueprint.send_pin_dirty_root(this.exports[0])
		}
	}

	store_selected()
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return
		}

		var indices = []
		for (var key in this.selected_edges)
		{
			var idx = BRepTools.find_edge_idx(v_shape.value, key.value)
			indices.add(idx)
		}
		return indices
	}

	load_selected(indices)
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return
		}

		this.selected_edges = []
		for (var idx in indices)
		{
			var key = BRepTools.find_edge_key(v_shape.value, idx)
			this.selected_edges.add(Variant(VAR_TOPO_EDGE, key))
		}
	}
}