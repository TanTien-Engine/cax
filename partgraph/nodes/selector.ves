import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NODE, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.dirty_types" for DIRTY_EDITOR
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_EDGE, VAR_TOPO_FACE
import "partgraph" for BRepSelector, BRepTools
import "partgraph.node_helper" for NodeHelper as pg_NodeHelper
import "maths.vector" for Vector2
import "graphics" for Graphics
import "keyboard" for Keyboard

class Selector is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape",  VAR_TOPO_SHAPE),
			Pin(this, "camera", VAR_TYPE_NODE),
		]
		this.exports = [
			Pin(this, "objs", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("type", "edge", { "combo" : [ "edge", "face" ] }))

		this.layout()

		this.selected_objs = nil
		this.selected_uids = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		this.selected_objs = nil
		//this.selected_uids = nil
	}

	calc_value(idx)
	{
		if (!this.selected_objs and this.selected_uids) 
		{
//			this.load_selected_by_idx(this.selected_uids)
			this.load_selected_by_uid(this.selected_uids)
		}

		if (this.selected_objs) {
			return Variant(this.selected_objs)
		} else {
			return nil
		}
	}

	compile_graph(compiler, idx)
	{
		var G = compiler.graph

		if (this.selected_uids.isEmpty) {
			return -1
		}

		var i_shp = pg_NodeHelper.compile_graph(this, 0, compiler)

		var i_uid = G.add_integer_node(this.selected_uids[0], "uid")

		return G.add_selector_node(i_shp, i_uid)
	}

	to_string(name) 
	{
		var ret = super.to_string(name)
		//var indices = this.store_selected()
		var indices = this.selected_uids
		return ret + "
%(name).selected_uids = %(indices)
"
	}

	on_mouse_pressed(x, y, btn) 
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return nil
		}

		var v_cam_node = Blueprint.calc_input_value(this, 1)
		if (!v_cam_node) {
			return
		}

		var cam = v_cam_node.value.cam

		var pos = cam.position
		var dir = cam.screen2dir(Vector2(x - Graphics.get_width() * 0.5, Graphics.get_height() * 0.5 - y))

		var obj = nil
		var obj_type = nil

		var type = this.query_param("type").value		
		if (type == "edge")
		{
			obj = BRepSelector.select_edge(v_shape.value, [ pos.x, pos.y, pos.z ], [ dir.x, dir.y, dir.z ])
			obj_type = VAR_TOPO_EDGE
		}
		else if (type == "face")
		{
			obj = BRepSelector.select_face(v_shape.value, [ pos.x, pos.y, pos.z ], [ dir.x, dir.y, dir.z ])
			obj_type = VAR_TOPO_FACE
		}
		else
		{
			return
		}

		if (this.selected_objs) {
			this.selected_objs.clear()
		} else {
			this.selected_objs = []		
		}

		var dirty = false
		if (!Keyboard.is_ctrl_pressed()) {
			this.selected_objs.clear()
			dirty = true
		}
		if (obj) 
		{
			this.selected_objs.add(Variant(obj_type, obj))

			if (!this.selected_uids) {
				this.selected_uids = []
			}
			//var uid = HistGraph.get_node_uid(obj)
			//this.selected_uids.add(uid)

			dirty = true
		}

		if (dirty) {
			Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
		}
	}

	store_selected()
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return
		}

		var indices = []

		var type = this.query_param("type").value
		for (var key in this.selected_objs)
		{
			var index = nil

			if (type == "edge") {
				index = BRepTools.find_edge_idx(v_shape.value, key.value)
			} else if (type == "face") {
				index = BRepTools.find_face_idx(v_shape.value, key.value)
			}

			if (index) {
				indices.add(index)
			}
		}

		return indices
	}

	load_selected_by_idx(indices)
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return
		}

		this.selected_objs = []

		var type = this.query_param("type").value
		for (var idx in indices)
		{
			var obj = nil
			var obj_type = nil

			if (type == "edge") 
			{
				obj = BRepTools.find_edge_key(v_shape.value, idx)
				obj_type = VAR_TOPO_EDGE
			} 
			else if (type == "face") 
			{
				obj = BRepTools.find_face_key(v_shape.value, idx)
				obj_type = VAR_TOPO_FACE
			}
			
			if (obj) {
				this.selected_objs.add(Variant(obj_type, obj))
			}
		}
	}

	load_selected_by_uid(uids)
	{
		this.selected_objs = []

		for (var uid in uids)
		{
			//var shapes = HistGraph.query_shapes(uid)
			//for (var shp in shapes) {
			//	this.selected_objs.add(Variant(VAR_TOPO_SHAPE, shp))
			//}
		}
	}
}