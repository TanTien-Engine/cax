import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_helper" for NodeHelper
import "blueprint.variant_helper" for VariantHelper, VAR_TYPE_ARRAY
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_FACE
import "partgraph" for TopoAlgo
import "breptopo" for HistGraph

class Offset is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape",  [ VAR_TOPO_SHAPE, VAR_TYPE_ARRAY ]),
			Pin(this, "offset", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "shape", [ VAR_TOPO_SHAPE, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("offset", 0.1))
		this.params.add(NodeParam("is_solid", false))

		this.layout()

		this.op_id = []
	}

	calc_value(idx)
	{
		var src_shps = []

		var v_shape = Blueprint.calc_input_value(this, 0)
		if (v_shape.type == VAR_TOPO_SHAPE)
		{
			src_shps.add(v_shape.value)
		}
		else
		{
			for (var v_shp in v_shape.value) {
				src_shps.add(v_shp.value)
			}
		}

		if (src_shps.isEmpty) {
			return nil
		}

		var offset = NodeHelper.calc_prop_value(this, "offset")
		var is_solid = NodeHelper.calc_prop_value(this, "is_solid")

		if (src_shps.count == 1)
		{
			var op_id
			if (this.op_id.isEmpty) 
			{
				op_id = HistGraph.get_next_op_id()
				this.op_id.add(op_id)
			}
			else
			{
				op_id = this.op_id[0]
			}

			var dst_shp = TopoAlgo.offset_shape(src_shps[0], offset, is_solid, op_id)
			return Variant(VAR_TOPO_SHAPE, dst_shp)
		}
		else
		{
			var dst_shps = []

			for (var i in 0..src_shps.count)
			{
				var op_id
				if (this.op_id.count <= i) 
				{
					op_id = HistGraph.get_next_op_id()
					this.op_id.add(op_id)
				}
				else
				{
					op_id = this.op_id[i]
				}

				var dst_shp = TopoAlgo.offset_shape(src_shps[i], offset, is_solid, op_id)
				dst_shps.add(Variant(VAR_TOPO_SHAPE, dst_shp))
			}

			return Variant(dst_shps)
		}
	}
}