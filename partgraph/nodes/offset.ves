import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_helper" for NodeHelper
import "blueprint.variant_helper" for VariantHelper
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_FACE
import "partgraph" for TopoAlgo

class Offset is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape",  VAR_TOPO_SHAPE),
			Pin(this, "offset", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
		]

		this.params.add(NodeParam("offset", 0.1))
		this.params.add(NodeParam("is_solid", false))

		this.layout()

		this.time = -1
	}

	calc_value(idx)
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape or v_shape.value.isEmpty) {
			return nil
		}

		var src_shp = v_shape.value[0].value
		var offset = NodeHelper.calc_prop_value(this, "offset")
		var is_solid = NodeHelper.calc_prop_value(this, "is_solid")
		var dst_shp = TopoAlgo.offset_shape(src_shp, offset, is_solid, this.time)
		if (dst_shp) 
		{
			this.time = dst_shp.get_time()
			return Variant(VAR_TOPO_SHAPE, dst_shp)
		}
		else 
		{
			return nil
		}
	}
}