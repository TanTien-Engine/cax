import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_helper" for NodeHelper
import "blueprint.variant_helper" for VariantHelper, VAR_TYPE_ARRAY
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_FACE
import "partgraph.node_helper" for NodeHelper as pg_NodeHelper
import "partgraph" for TopoAlgo

class Offset is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape",  [ VAR_TOPO_SHAPE, VAR_TYPE_ARRAY ]),
			Pin(this, "offset", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "shape", [ VAR_TOPO_SHAPE, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("offset", 0.1))
		this.params.add(NodeParam("is_solid", false))

		this.layout()

		// compute graph
		this.graph = nil
		this.i_offset = -1
		this.i_is_solid = -1

		this.op_id = []
	}

	on_param_dirty()
	{
		super.on_param_dirty()

		var offset = NodeHelper.calc_prop_value(this, "offset")
		this.graph.update_number_node(this.i_offset, offset)

		var is_solid = NodeHelper.calc_prop_value(this, "is_solid")
		this.graph.update_boolean_node(this.i_is_solid, is_solid)
	}

	calc_value(idx)
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		var src_shps = []
		this.get_input_shapes(v_shape, src_shps)
		if (src_shps.isEmpty) {
			return nil
		}

		var offset = NodeHelper.calc_prop_value(this, "offset")
		var is_solid = NodeHelper.calc_prop_value(this, "is_solid")

		if (src_shps.count == 1)
		{
			var op_id
			if (this.op_id.isEmpty) 
			{
				//op_id = HistGraph.get_next_op_id()
				//this.op_id.add(op_id)
			}
			else
			{
				op_id = this.op_id[0]
			}

			var dst_shp = TopoAlgo.offset_shape(src_shps[0], offset, is_solid, op_id)
			return Variant(VAR_TOPO_SHAPE, dst_shp)
		}
		else
		{
			var dst_shps = []

			for (var i in 0..src_shps.count)
			{
				var op_id
				if (this.op_id.count <= i) 
				{
					//op_id = HistGraph.get_next_op_id()
					//this.op_id.add(op_id)
				}
				else
				{
					op_id = this.op_id[i]
				}

				var dst_shp = TopoAlgo.offset_shape(src_shps[i], offset, is_solid, op_id)
				dst_shps.add(Variant(VAR_TOPO_SHAPE, dst_shp))
			}

			return Variant(dst_shps)
		}
	}

	compile_graph(compiler, idx)
	{
		var G = compiler.graph

		var i_shape = pg_NodeHelper.compile_graph(this, 0, compiler)

		var offset = NodeHelper.calc_prop_value(this, "offset")
		var is_solid = NodeHelper.calc_prop_value(this, "is_solid")

		var i_offset = G.add_number_node(offset, "offset")
		var i_is_solid = G.add_boolean_node(is_solid, "is_solid")

		this.graph = G
		this.i_offset = i_offset
		this.i_is_solid = i_is_solid

		return G.add_offset_node(i_shape, i_offset, i_is_solid)
	}

	compile_graph_old(compiler, idx)
	{
		var G = compiler.graph
		
		var v_shape = Blueprint.calc_input_value(this, 0)
		var src_shps = []
		this.get_input_shapes(v_shape, src_shps)
		if (src_shps.isEmpty) {
			return nil
		}

		var offset = NodeHelper.calc_prop_value(this, "offset")
		var is_solid = NodeHelper.calc_prop_value(this, "is_solid")

		var i_offset = G.add_number_node(offset, "offset")
		var i_is_solid = G.add_boolean_node(is_solid, "is_solid")

		if (src_shps.count == 1)
		{
			var i_shape = G.add_shape_node(src_shps[0], "inp_shape")
			return G.add_offset_node(i_shape, i_offset, i_is_solid)
		}
		else
		{
			var i_nodes = []
			for (var i in 0..src_shps.count)
			{
				var i_shape = G.add_shape_node(src_shps[i], "inp_shape")
				var i_ret = G.add_offset_node(i_shape, i_offset, i_is_solid)
				i_nodes.add(i_ret)
			}
			return G.add_merge_node(i_nodes)
		}
	}

	get_input_shapes(val, shapes)
	{
		if (val.type == VAR_TOPO_SHAPE)
		{
			shapes.add(val.value)
		}
		else if (val.type == VAR_TYPE_ARRAY)
		{
			for (var v in val.value) {
				shapes.add(v.value)
			}
		}
	}
}