import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "rendergraph.variant" for VAR_TYPE_VERTEX_ARRAY
import "partgraph.variant" for VAR_TOPO_SHAPE, VAR_TOPO_SHELL
import "partgraph" for TopoAdapter

class ToMesh is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape", [ VAR_TOPO_SHAPE, VAR_TOPO_SHELL, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "va", [ VAR_TYPE_VERTEX_ARRAY, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_shape = Blueprint.calc_input_value(this, 0)
		if (!v_shape) {
			return nil
		}

		var meshes = []
		this.build_meshes(v_shape, meshes)

		if (meshes.count == 0)
		{
			return nil
		}
		else if (meshes.count == 1)
		{
			return Variant(VAR_TYPE_VERTEX_ARRAY, meshes[0])
		}
		else
		{
			return Variant(VAR_TYPE_ARRAY, meshes)
		}
	}

	build_meshes(v_shape, meshes)
	{
		if (v_shape.type == VAR_TOPO_SHAPE or v_shape.type == VAR_TOPO_SHELL)
		{
			var va = TopoAdapter.build_mesh(v_shape.value)
			if (va) {
				meshes.add(va)
			}
		}
		else if (v_shape.type == VAR_TYPE_ARRAY)
		{
			for (var shape in v_shape.value)
			{
				this.build_meshes(shape, meshes)
			}
		}
	}
}