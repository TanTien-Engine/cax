import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "partgraph.variant" for VAR_TOPO_EDGE, VAR_TOPO_WIRE
import "partgraph" for TopoAdapter
import "geograph.variant" for VAR_TYPE_GEO, VarGeo

class ToGeometry is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "topo", [ VAR_TOPO_EDGE, VAR_TOPO_WIRE ]),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_topo = Blueprint.calc_input_value(this, 0)
		if (!v_topo) {
			return nil
		}

		var geo = nil
		if (v_topo.type == VAR_TOPO_EDGE) {
			geo = TopoAdapter.build_edge_geo(v_topo.value)
		} else if (v_topo.type == VAR_TOPO_WIRE) {
			geo = TopoAdapter.build_wire_geo(v_topo.value)
		}

		var v_geo = VarGeo()
		v_geo.shape = geo
		return Variant(VAR_TYPE_GEO, v_geo)
	}
}