import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_helper" for NodeHelper
import "partgraph.variant" for VAR_TOPO_SHAPE
import "partgraph" for PrimMaker

class Box is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "length", VAR_TYPE_NUMBER),
			Pin(this, "width",  VAR_TYPE_NUMBER),
			Pin(this, "height", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
		]

		this.params.add(NodeParam("length", 1.0, { "region" : 2 }))
		this.params.add(NodeParam("width",  1.0, { "region" : 2 }))
		this.params.add(NodeParam("height", 1.0, { "region" : 2 }))

		this.layout()

		this.op_id = -1
	}

	calc_value(idx)
	{
		var length = NodeHelper.calc_prop_value(this, "length")
		var width  = NodeHelper.calc_prop_value(this, "width")
		var height = NodeHelper.calc_prop_value(this, "height")

		if (this.op_id < 0) {
			//this.op_id = HistGraph.get_next_op_id()
		}

		var shape = PrimMaker.box(length, height, width, this.op_id)
		if (shape) {
			return Variant(VAR_TOPO_SHAPE, shape)
		} else {
			return nil
		}
	}

	compile_graph(G, idx)
	{
		var length = NodeHelper.calc_prop_value(this, "length")
		var width  = NodeHelper.calc_prop_value(this, "width")
		var height = NodeHelper.calc_prop_value(this, "height")

		var i_length = G.add_number_node(length, "length")
		var i_width  = G.add_number_node(width, "width")
		var i_height = G.add_number_node(height, "height")

		return G.add_box_node(i_length, i_height, i_width)
	}
}