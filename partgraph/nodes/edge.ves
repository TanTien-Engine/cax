import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "partgraph.variant" for VAR_TOPO_EDGE
import "partgraph" for BRepBuilder
import "geometry" for Line3D, Arc3D
import "geograph.variant" for VAR_TYPE_GEO
import "partgraph.variant" for VAR_GEOM_SHAPE

class Edge is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape1", [ VAR_TYPE_GEO, VAR_GEOM_SHAPE ]),
			Pin(this, "shape2", [ VAR_TYPE_GEO, VAR_GEOM_SHAPE ]),
		]
		this.exports = [
			Pin(this, "edge", VAR_TOPO_EDGE),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_shape1 = Blueprint.calc_input_value(this, 0)
		if (!v_shape1) {
			return nil
		}

		var edge = nil
		if (v_shape1.type == VAR_TYPE_GEO)
		{
			var shape1 = v_shape1.value.shape
			if (shape1 is Line3D) {
				edge = BRepBuilder.make_edge_from_line(shape1)
			} else if (shape1 is Arc3D) {
				edge = BRepBuilder.make_edge_from_arc(shape1)
			}
		}
		else if (v_shape1.type == VAR_GEOM_SHAPE)
		{
			var v_shape2 = Blueprint.calc_input_value(this, 1)
			if (v_shape2 and v_shape2.type == VAR_GEOM_SHAPE) 
			{
				var c = v_shape1.value
				var s = v_shape2.value
				edge = BRepBuilder.make_edge_from_curve_surf(c, s)
			}
		}

		if (edge) {
			return Variant(VAR_TOPO_EDGE, edge)
		} else {
			return nil
		}
	}
}