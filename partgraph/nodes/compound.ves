import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "blueprint.node_helper" for NodeHelper
import "partgraph.variant" for VAR_TOPO_SHAPE
import "partgraph" for BRepBuilder

class Compound is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "shape0", VAR_TOPO_SHAPE),
			Pin(this, "shape1", VAR_TOPO_SHAPE),
		]
		this.exports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var shapes = []
		for (var i in 0 .. this.imports.count)
		{
			var v_shape = Blueprint.calc_input_value(this, i)
			if (v_shape) {
				shapes.add(v_shape.value)
			}
		}

		var shape = BRepBuilder.make_compound(shapes)
		return Variant(VAR_TOPO_SHAPE, shape)
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, 0, "shape", VAR_TOPO_SHAPE)
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, 0, "shape", VAR_TOPO_SHAPE)
		}
	}
}