import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "partgraph.variant" for VAR_TOPO_SHAPE
import "partgraph.node_helper" for NodeHelper
import "partgraph" for TopoAlgo
import "breptopo" for HistGraph

class Cut is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "a", VAR_TOPO_SHAPE),
			Pin(this, "b", VAR_TOPO_SHAPE),
		]
		this.exports = [
			Pin(this, "shape", VAR_TOPO_SHAPE),
		]

		this.layout()

		this.op_id = -1
	}

	calc_value(idx)
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		if (!v_a) {
			return nil
		}
		var v_b = Blueprint.calc_input_value(this, 1)
		if (!v_b) {
			return nil
		}

		if (this.op_id < 0) {
			this.op_id = HistGraph.get_next_op_id()
		}

		var shape = TopoAlgo.cut(v_a.value, v_b.value, this.op_id)
		if (shape) {
			return Variant(VAR_TOPO_SHAPE, shape)
		} else {
			return nil
		}
	}

	compile_graph(G, idx)
	{
		var i_a = NodeHelper.compile_graph(this, 0, G)
		var i_b = NodeHelper.compile_graph(this, 1, G)
		return G.add_cut_node(i_a, i_b)
	}
}